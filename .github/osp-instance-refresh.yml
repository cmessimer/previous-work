name: Refresh OSP Boxes
run-name: "Refresh OSP ${{ github.event.inputs.environment }} ${{ github.event.inputs.targets-color }} in ${{ github.event.inputs.region }}"
on:
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: choice
        default: "development"
        options:
          - development
          - qa
          - stage
          - production
          - recovery
      targets-color:
        required: true
        type: choice
        default: "blue"
        options:
          - blue
          - green
      region:
        required: true
        type: choice
        default: "us-east-1"
        options:
          - us-east-1
          - us-west-2
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      targets-color:
        required: true
        type: string
      region:
        required: true
        type: string

env:
  CHECKOUT_REF: ${{ inputs.repo-checkout-ref == '' && github.ref || inputs.repo-checkout-ref }}
  CHECKOUT_REPO: "xinc/sre-o-series-proxy-infrastructure"
  CHECKOUT_PATH: "sre-o-series-proxy-infrastructure"
  CHECKOUT_TOKEN: ${{ secrets.ORG_LEVEL_ACTION_PAT }}
  REGION: "${{ github.event.inputs.region }}"
  TARGETS_COLOR: "${{ github.event.inputs.targets-color }}"
  ENVIRONMENT: "${{ github.event.inputs.environment }}"
jobs:
  get_config:
    name: Set Config
    runs-on: [self-hosted, Linux, Standard, X64]
    # NOTE: Cannot update to new container until we resolve `GLIBC_2.27' not found
    # container:
    #   image: docker.binrepo.vtxdev.net/cloud-base-images/immutable-build:latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 2
          ref: ${{ env.CHECKOUT_REF }}
          repository: ${{ env.CHECKOUT_REPO }}
          token: ${{ env.CHECKOUT_TOKEN }}

  parse_inputs:
    name: Parse Inputs
    needs: [get_config]
    runs-on:
      [self-hosted, Linux, Standard, X64]
      # NOTE: Cannot update to new container until we resolve `GLIBC_2.27' not found
      # container:
      #   image: docker.binrepo.vtxdev.net/cloud-base-images/immutable-build:latest
    outputs:
      role_arn: ${{ steps.parse_inputs.outputs.role_arn }}
      targets_color: ${{ steps.parse_inputs.outputs.targets_color }}
      account_id: ${{ steps.parse_inputs.outputs.account_id }}
      region: ${{ steps.parse_inputs.outputs.region }}
      env_tag: ${{ steps.parse_inputs.outputs.env_tag }}
      environment: ${{ steps.parse_inputs.outputs.environment }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Parse Inputs
        id: parse_inputs
        run: |
          environment="${{ github.event.inputs.environment }}"
          echo "${{ github.event_name }} event"
          repo_checkout_ref="${{ inputs.repo-checkout-ref }}"
          region="${{ inputs.region }}"
          targets_color="${{ inputs.targets-color }}"

          echo "Region: $region"
          echo "Targets Color: $targets_color"
          echo "The Environment is: $environment"

          echo "Environment: $environment"
          if [[ "$environment" == 'production' ]]; then
              account_id=409148389496
          elif [[ "$environment" == 'qa' ]]; then
              account_id=111885873467
          elif [[ "$environment" == 'development' ]]; then
              account_id=597123819409
          elif [[ "$environment" == 'stage' ]]; then
              account_id=409148389496
          elif [[ "$environment" == 'recovery' ]]; then
              account_id=225129922047
          else
              echo "Environment not found"
              exit 1
          fi
          echo "$environment Account ID: $account_id"
          echo "Account ID: $account_id"

          role_arn="arn:aws:iam::$account_id:role/vtx-GitHubActions"
          echo "GHA Role Arn: $role_arn"

          # Set the environment tag
          environment="${{ github.event.inputs.environment }}"
          echo "Environment: $environment"
          echo "environment=$environment" >> $GITHUB_OUTPUT

          case "$environment" in
            development) env_tag="Development" ;;
            qa) env_tag="Qa" ;;
            stage) env_tag="Stage" ;;
            production) env_tag="Production" ;;
            *) echo "Unknown environment" ; exit 1 ;;
          esac
          echo "Env Tag: $env_tag"
          echo "env_tag=$env_tag" | tee -a $GITHUB_ENV
          echo "env_tag=$env_tag" >> $GITHUB_OUTPUT

          echo "CHECKOUT_REF: ${{ env.CHECKOUT_REF }}"
          echo "CHECKOUT_REPO: ${{ env.CHECKOUT_REPO }}"
          echo "CHECKOUT_PATH: ${{ env.CHECKOUT_PATH }}"
          echo "CHECKOUT_TOKEN: ${{ env.CHECKOUT_TOKEN }}"

          echo env_tag=$env_tag >> $GITHUB_OUTPUT
          echo region=$region >> $GITHUB_OUTPUT
          echo role_arn=$role_arn >> $GITHUB_OUTPUT
          echo targets_color=$targets_color >> $GITHUB_OUTPUT
          echo account_id=$account_id >> $GITHUB_OUTPUT
          echo environment=$environment >> $GITHUB_OUTPUT

  context:
    needs: [get_config, parse_inputs]
    runs-on: [self-hosted, Linux, Standard, X64]
    # NOTE: Cannot update to new container until we resolve `GLIBC_2.27' not found
    # container:
    #   image: docker.binrepo.vtxdev.net/cloud-base-images/immutable-build:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          ref: ${{ needs.initial.outputs.ref }}
          fetch-depth: 1

      - name: Dump Github Context # https://docs.github.com/en/actions/learn-github-actions/contexts
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: printf '%s\n' "$GITHUB_CONTEXT"

      - name: Dump Env Context
        env:
          ENV_CONTEXT: ${{ toJson(env) }}
        run: printf '%s\n' "$ENV_CONTEXT"

      - name: Dump Vars Context
        env:
          VARS_CONTEXT: ${{ toJson(vars) }}
        run: printf '%s\n' "$VARS_CONTEXT"

      - name: Dump Job Context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: printf '%s\n' "$JOB_CONTEXT"

      - name: Dump Steps Context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: printf '%s\n' "$STEPS_CONTEXT"

      # # The jobs context is only available in reusable workflows, and can only be used to set outputs for a reusable workflow.
      # - name: Dump Jobs Context
      #   env:
      #     JOBS_CONTEXT: ${{ toJson(jobs) }}
      #   run: printf '%s\n' "$JOBS_CONTEXT"

      - name: Dump Steps Context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: printf '%s\n' "$STEPS_CONTEXT"

      - name: Dump Runner Context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: printf '%s\n' "$RUNNER_CONTEXT"

      # # For Debug only (Secrets should be stars, but will probably name all secrets.)
      # - name: Dump Secrets Context
      #   env:
      #     SECRETS_CONTEXT: ${{ toJson(secrets) }}
      #   run: printf '%s\n' "$SECRETS_CONTEXT"

      # - name: Dump Strategy Context
      #   env:
      #     STRATEGY_CONTEXT: ${{ toJson(strategy) }}
      #   run: printf '%s\n' "$STRATEGY_CONTEXT"

      # - name: Dump Matrix Context
      #   env:
      #     MATRIX_CONTEXT: ${{ toJson(matrix) }}
      #   run: printf '%s\n' "$MATRIX_CONTEXT"

      - name: Dump Needs Context
        env:
          NEEDS_CONTEXT: ${{ toJson(needs) }}
        run: printf '%s\n' "$NEEDS_CONTEXT"

      - name: Show Default Environment Variables
        run: |
          echo "The job_id is: $GITHUB_JOB"   # reference the default environment variables
          echo "The id of this action is: $GITHUB_ACTION"   # reference the default environment variables
          echo "The run id is: $GITHUB_RUN_ID"
          echo "The GitHub Actor's username is: $GITHUB_ACTOR"
          echo "GitHub SHA: $GITHUB_SHA"

  gather_asg_data:
    name: Gather ASG Data
    needs: [parse_inputs]
    runs-on: [self-hosted, Linux, Standard, X64]
    # NOTE: Cannot update to new container until we resolve `GLIBC_2.27' not found
    # container:
    #   image: docker.binrepo.vtxdev.net/cloud-base-images/immutable-build:latest
    outputs:
      needs: gather_asg_data
      json_asg_names: ${{ steps.list_asgs.outputs.json_asg_names }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Install AWS CLI v2
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o /tmp/awscliv2.zip
          unzip -q /tmp/awscliv2.zip -d /tmp
          rm /tmp/awscliv2.zip
          sudo /tmp/aws/install --update
          rm -rf /tmp/aws/
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-region: ${{ needs.parse_inputs.outputs.region }}
          role-external-id: ${{ secrets.ORG_RUNNER_AWS_EXTERNALID }}
          role-skip-session-tagging: true
          role-session-name: asg-gather
          role-to-assume: ${{ needs.parse_inputs.outputs.role_arn }}
          role-duration-seconds: 3600

      - name: Check Token Expiry
        run: aws sts get-caller-identity

      - name: List Matching Env and Color ASGs
        id: list_asgs
        shell: pwsh
        run: |
          $env_tag = "${{ needs.parse_inputs.outputs.env_tag }}"
          $targets_color = "${{ needs.parse_inputs.outputs.targets_color }}"
          $region = "${{ needs.parse_inputs.outputs.region }}"

          Write-Output "Env: $env_tag"
          Write-Output "Targets Color: $targets_color"
          Write-Output "Region: $region"

          $filters = @("Name=tag:Environment,Values=$env_tag", "Name=tag:Component,Values=OSP", "Name=tag:Color,Values=$targets_color")

          Write-Host "Filters: $($filters -join ' ')"
          $json_asg_names = $(aws autoscaling describe-auto-scaling-groups `
            --region $region `
            --filters $filters `
            --output json | ConvertFrom-Json).AutoScalingGroups.AutoScalingGroupName | ConvertTo-Json -AsArray -Compress
          Write-Host "json_asg_names=$json_asg_names"
          echo "json_asg_names=$json_asg_names" >> $env:GITHUB_OUTPUT

  check_instance_refresh:
    name: Check Instance Refresh
    needs: [gather_asg_data, parse_inputs]
    runs-on: [self-hosted, Linux, Standard, X64]
    if: needs.gather_asg_data.outputs.json_asg_names !='[]' && needs.gather_asg_data.outputs.json_asg_names !='[null]' && needs.gather_asg_data.outputs.json_asg_names !='null' && needs.gather_asg_data.outputs.json_asg_names !='' && needs.gather_asg_data.outputs.json_asg_names !='""' && needs.gather_asg_data.outputs.json_asg_names !='[]' && needs.gather_asg_data.outputs.json_asg_names !='[""]' && needs.gather_asg_data.outputs.json_asg_names !='["null"]' && needs.gather_asg_data.outputs.json_asg_names !='["[]"]'
    defaults:
      run:
        shell: pwsh
    strategy:
      fail-fast: false
      matrix:
        asg_name: ${{ fromJson(needs.gather_asg_data.outputs.json_asg_names) }}
    steps:
      - name: Install AWS CLI v2
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o /tmp/awscliv2.zip
          unzip -q /tmp/awscliv2.zip -d /tmp
          rm /tmp/awscliv2.zip
          sudo /tmp/aws/install --update
          rm -rf /tmp/aws/
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-region: ${{ needs.parse_inputs.outputs.region }}
          role-external-id: ${{ secrets.ORG_RUNNER_AWS_EXTERNALID }}
          role-skip-session-tagging: true
          role-session-name: asg-gather
          role-to-assume: ${{ needs.parse_inputs.outputs.role_arn }}
          role-duration-seconds: 3600

      - name: Check Token Expiry
        run: aws sts get-caller-identity

      - name: Check Instance Refresh
        id: check_instance_refresh
        shell: pwsh
        run: |
          $asg_name="${{ matrix.asg_name }}"
          $region="${{ needs.parse_inputs.outputs.region }}"
          Write-Output "Region: $region"

          $describe_refresh = aws autoscaling describe-instance-refreshes `
            --region $region `
            --max-records 1 `
            --auto-scaling-group-name $asg_name `
            | ConvertFrom-Json

          if ($describe_refresh -and $describe_refresh.InstanceRefreshes.Count -gt 0) {
            $refresh_status = $describe_refresh.InstanceRefreshes[0].Status
            $status_reason = $describe_refresh.InstanceRefreshes[0].StatusReason

            # If null, or the word null, set to Successful...
            if (-not $refresh_status -or $refresh_status -eq "null") {
              Write-Output "refresh_status: $refresh_status, setting to Successful..."
              $refresh_status = 'Successful'
              $status_reason = 'No Instance Refresh status was available.'
            }
            Write-Output "Refresh Status: $refresh_status"
            Write-Output "Status Reason: $status_reason"
          } else {
            Write-Output "No Instance Refreshes found for ASG: $asg_name"
          }

  execute_instance_refresh:
    name: Execute Instance Refresh
    environment: "${{ needs.parse_inputs.outputs.environment }}|application/targets|${{ needs.parse_inputs.outputs.targets_color}}|${{ needs.parse_inputs.outputs.region}}/instance_refresh"
    needs: [gather_asg_data, parse_inputs]
    runs-on: [self-hosted, Linux, Standard, X64]
    if: needs.gather_asg_data.outputs.json_asg_names !='[]' && needs.gather_asg_data.outputs.json_asg_names !='[null]' && needs.gather_asg_data.outputs.json_asg_names !='null' && needs.gather_asg_data.outputs.json_asg_names !='' && needs.gather_asg_data.outputs.json_asg_names !='""' && needs.gather_asg_data.outputs.json_asg_names !='[]' && needs.gather_asg_data.outputs.json_asg_names !='[""]' && needs.gather_asg_data.outputs.json_asg_names !='["null"]' && needs.gather_asg_data.outputs.json_asg_names !='["[]"]'
    defaults:
      run:
        shell: pwsh
    strategy:
      fail-fast: false
      matrix:
        asg_name: ${{ fromJson(needs.gather_asg_data.outputs.json_asg_names) }}
    steps:
      - name: Install AWS CLI v2
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o /tmp/awscliv2.zip
          unzip -q /tmp/awscliv2.zip -d /tmp
          rm /tmp/awscliv2.zip
          sudo /tmp/aws/install --update
          rm -rf /tmp/aws/
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-region: ${{ needs.parse_inputs.outputs.region }}
          role-external-id: ${{ secrets.ORG_RUNNER_AWS_EXTERNALID }}
          role-skip-session-tagging: true
          role-session-name: asg-refresh
          role-to-assume: ${{ needs.parse_inputs.outputs.role_arn }}
          role-duration-seconds: 3600

      - name: Execute Instance Refresh
        run: |
          $region="${{ needs.parse_inputs.outputs.region }}"
          $asg_name="${{ matrix.asg_name }}"

          # Start the instance refresh
          $preferences = @{
            SkipMatching = $false
          } | ConvertTo-Json -Compress

          $refresh_data = aws autoscaling start-instance-refresh `
              --region $region `
              --auto-scaling-group-name $asg_name `
              --preferences $preferences

          $refresh_id = $refresh_data | ConvertFrom-Json | Select-Object -ExpandProperty InstanceRefreshId
          Write-Output "Instance Refresh Id: $refresh_id"

          $refresh_is_complete = $false
          $active_statuses = @('Pending', 'InProgress', 'Cancelling', 'RollbackInProgress')
          $timeout_secs = 3600
          $cooldown_secs = 30
          $max_run_time = (Get-Date).AddSeconds($timeout_secs)

          while ($refresh_is_complete -eq $false) {
            Write-Output "-"
            $sleep_time = $cooldown_secs + (Get-Random -Maximum 31)
            Write-Output "Pausing Polling for $sleep_time seconds..."
            Start-Sleep -Seconds $sleep_time
            Write-Output "Pause complete. Polling instance refresh status."
            Write-Output "-"

            $describe_refresh = aws autoscaling describe-instance-refreshes `
              --region $region `
              --auto-scaling-group-name $asg_name `
              --instance-refresh-ids $refresh_id `
              | ConvertFrom-Json

            $refresh_status = $describe_refresh.InstanceRefreshes[0].Status
            $status_reason = $describe_refresh.InstanceRefreshes[0].StatusReason

            # If null, or the word null, set to Pending...
            if ([string]::IsNullOrEmpty($refresh_status) -or $refresh_status -eq "null") {
              Write-Output "refresh_status: $refresh_status, setting to Pending..."
              $refresh_status = 'Pending'
              $status_reason = 'No Instance Refresh status was available.'
            }

            Write-Output "$asg_name Refresh Status: $refresh_status, Reason: $status_reason"

            # If status is not an active status, end loop
            if ($active_statuses -notcontains $refresh_status) {
              $refresh_is_complete = $true
              Write-Output "Instance Refresh completed. Exiting loop..."
            }

            # If time has elapsed, log and end loop
            if ((Get-Date) -gt $max_run_time) {
              Write-Output "Max refresh polling time has elapsed. Exiting loop..."
              $refresh_is_complete = $true
            }
          }
